{"version":3,"sources":["logo.svg","components/Navbar.js","components/puzzles.js","components/solver.js","components/Board.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["navbar","className","puzzles","num","outputArray","myArray","chunk_size","index","arrayLength","length","tempArray","i","parseInt","myChunk","slice","push","chunkArray","split","solver","board","possible","y","x","n","xSquare","Math","floor","ySquare","j","solve","Board","randomId","random","useState","puzzleId","setPuzzleId","originalGame","setOriginalGame","clone","array","map","arr","game","setGame","solvedBoard","setSolvedBoard","isCorrectBorder","col","input","console","log","type","maxLength","value","onClick","e","target","onChange","row","column","event","copy","handleChange","uuid","readOnly","useEffect","yindex","xindex","Button","footer","App","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAAe,I,kBCWAA,MARf,WACI,OACI,qBAAKC,UAAU,eAAf,qB,qDCLD,SAASC,EAAQC,GAqHtB,IAAMC,EAbN,SAAoBC,EAASC,GAI3B,IAHA,IAAIC,EAAQ,EACRC,EAAcH,EAAQI,OACtBC,EAAY,GACPC,EAAI,EAAGA,EAAIN,EAAQI,OAAQE,IAAKN,EAAQM,GAAKC,SAASP,EAAQM,IACvE,IAAKJ,EAAQ,EAAGA,EAAQC,EAAaD,GAASD,EAAY,CACxD,IAAMO,EAAUR,EAAQS,MAAMP,EAAOA,EAAQD,GAC7CI,EAAUK,KAAKF,GAGjB,OAAOH,EAGWM,CApHJ,CACd,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,qFAgBqCb,GAAKc,MAAM,IAAK,GAEvD,OAAId,EACKC,EAEA,KC1HJ,SAASc,EAAOC,GACnB,SAASC,EAASD,EAAOE,EAAGC,EAAGC,GAC3B,IAAK,IAAIZ,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIQ,EAAME,GAAGV,KAAOY,GAAKJ,EAAMR,GAAGW,KAAOC,EACvC,OAAO,EAOX,IAHA,IAAMC,EAA8B,EAApBC,KAAKC,MAAMJ,EAAI,GA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","file":"static/js/main.656a45c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport \"./Navbar.css\"\n\nfunction navbar() {\n    return (\n        <div className=\"navbar title\">\n            Sudoku\n        </div>\n    )\n}\n\nexport default navbar\n","export function puzzles(num) {\n  const puzzles = [\n    \"004300209005009001070060043006002087190007400050083000600000105003508690042910300\",\n    \"040100050107003960520008000000000017000906800803050620090060543600080700250097100\",\n    \"600120384008459072000006005000264030070080006940003000310000050089700000502000190\",\n    \"497200000100400005000016098620300040300900000001072600002005870000600004530097061\",\n    \"005910308009403060027500100030000201000820007006007004000080000640150700890000420\",\n    \"100005007380900000600000480820001075040760020069002001005039004000020100000046352\",\n    \"009065430007000800600108020003090002501403960804000100030509007056080000070240090\",\n    \"000000657702400100350006000500020009210300500047109008008760090900502030030018206\",\n    \"503070190000006750047190600400038000950200300000010072000804001300001860086720005\",\n    \"060720908084003001700100065900008000071060000002010034000200706030049800215000090\",\n    \"004083002051004300000096710120800006040000500830607900060309040007000205090050803\",\n    \"000060280709001000860320074900040510007190340003006002002970000300800905500000021\",\n    \"004300000890200670700900050500008140070032060600001308001750900005040012980006005\",\n    \"008070100120090054000003020604010089530780010009062300080040607007506000400800002\",\n    \"065370002000001370000640800097004028080090001100020940040006700070018050230900060\",\n    \"005710329000362800004000000100000980083900250006003100300106000409800007070029500\",\n    \"200005300000073850000108904070009001651000040040200080300050000580760100410030096\",\n    \"040800500080760092001005470056309000009001004320500010000200700700090030005008026\",\n    \"050083017000100400304005608000030009090824500006000070009000050007290086103607204\",\n    \"700084005300701020080260401624109038803600010000000002900000000001005790035400006\",\n    \"067050010084309000003080040090000205000621790700093600300400000020007153500800076\",\n    \"001409030000306052007008190060020800000003065894507000403091080079040026000700900\",\n    \"206030000001065070047108050500000029008019406000420001000042800609300005070000013\",\n    \"004502178100090030000800004600450000070900012801203500400000009350060807090300620\",\n    \"140060800085010040907400250030070400209000307008900060000740010601305090700002600\",\n    \"590000147000900008072000030700040290020030806800170050005764009036005000100800002\",\n    \"100000090208970605000532000006050400700806002083700010604080120890600050015040007\",\n    \"900084060604005207030070080760001500053000001000409603105026090002040000800003710\",\n    \"308056007006900253012040000000000320904800000760109805000001904831000506040007030\",\n    \"170300009008040600000060030600800001924600300300902500010200040709503016005007800\",\n    \"004030021070005009380690000030000000602100450010907003000846700560001240008250030\",\n    \"083200096200030704007915000402390008010004060069870000000400007500060280070050900\",\n    \"803000270409008000700024096000006915001802000030750000054000060608100003372009140\",\n    \"070490103003070590050000000000000061100749020024306008600980700012600000480007052\",\n    \"830040096020010008904700030409002065308001070000603800507030020000506400002080100\",\n    \"060250000792006100000081600009000500410009780207300004000763010300540290800000040\",\n    \"050400680090100000008059302007203000000600208604080005036004190100007000072800050\",\n    \"010092047000700609600040100003000000720008900840105070106400280480030000900017005\",\n    \"078010609203009008410060052720106030000400700091305000932000400005720010000008006\",\n    \"056010000280030040040090765790003008005760000000004001100600203020001400060805900\",\n    \"000001847010000000059348006300020004076100500200006790040207069007800415003590000\",\n    \"205040003001009000046001587004607090802000056090020340170008200000500800500903001\",\n    \"850420370003000010000170009000500602029304000010000438046090805005000900702840003\",\n    \"061490020280007050003108007600704031000250074090600000000010008570000206800906000\",\n    \"608900050000320190010000300400073600570260000003105020080000064020090507047008001\",\n    \"000700900004300527010006084800094053040001200962080070100869000700020130059000000\",\n    \"680905000003000508402108703390720800000000010045006900060804002001002075700013000\",\n    \"600837001089004700102000400000450020030609005040000860908006070700098010005100930\",\n    \"000067430800009150500003009007000010001806304940350020009010502608200700400708000\",\n    \"063700401400000000700091300092076030004500260035000100509040820087010609000003000\",\n    \"000340002006082073700100450082005014000098300670000005140700000905030020030000806\",\n    \"008070600960001405402000010200830090600790103007004026500900307030020500000310089\",\n    \"087200490060891000005000002400300500019002803000706200030050600500060017071403050\",\n    \"107008000650100000300060072060030250480009700001407009000000800003980015040203060\",\n    \"000704010803620907016090000000100406598400002000030079034075000100900360250300040\",\n    \"500038701026004850300072940054100300890400000000060000003000069000721400401390000\",\n    \"600050000073008020854027000201700530400069007080000900027301084060540009300000001\",\n    \"000900406701040002009501378012300009300004080085000230050007000093008600020600541\",\n    \"007500904000082305001600002800036070016004200430190050540008000029071030000000609\",\n    \"001040730630900004075000200000000501069001000004002079980500602710609300000203080\",\n    \"507108002000043100900500006070050004100002069600700380320490000001006400009070528\",\n    \"807000000610005430400690000002800709003007820900051046000009670054000000200403018\",\n    \"040000200710930000058020760300060000406800920020705800031070090007058601500100007\",\n    \"002834700010060005798200400903050100000009007080072060600081024051000300040000090\",\n    \"431800006000300010000006205609134070020000040000570089003659020500080104807000003\",\n    \"020000106610239040050004007003520009009400080800701400795006002200180000400000653\",\n    \"003000150620700009051000007180670003509003400030080201000207904000098620004510008\",\n    \"400053270020600803008904010145200006000048300000001090601300450000070900780000060\",\n    \"004030009520001300019860200402000700037006800608510020900080070073002046000000130\",\n    \"023000061000068007000304058058006120007090080140000509000430000064085930001072000\",\n    \"031020060005074003006800020700406038000095706200780901098140000500000890300000002\",\n    \"015040002020560098300010007200000600940001000030680704458000000090872050600430900\",\n    \"604302001780006300900510400003004078028000096000601004090057800000020015000403700\",\n    \"000048010943050700008200006050000379002400080070013040600590002109087500530060000\",\n    \"900003050246050700070680100000008039501200800700006001809420006002010078030000240\",\n    \"002078000006015908905000100400709500030054070000061204000020306008000009710800450\",\n    \"043020000050180070890506100400009706031000059000871000070005460002043501000600320\",\n    \"206597403080103000507000009000004210028006500409010060700305000001200000300480902\",\n    \"270600050000070406006059030040005600081000040029006173390000002000097800807140005\",\n    \"010907030002100004958002000600030002073060580000705069080000406304000105009210800\",\n    \"290041000470302050000060208039400005100000070504100603613200704000003080005900100\",\n    \"080623090400007000900000713006910400805000026014500007030708000500000009021460085\",\n    \"000050007050004020020160430941000000008746000000300508400000209705080300219030076\",\n    \"000457602940061300070000080100509400700086930020003007400010059006000800218300700\",\n    \"000720041003051890070000000730200160004109305205080009800000006090007200560904003\",\n    \"000230050673400800005007900310780000064009200082546009008000103000801700000600405\",\n    \"980046025000090700700300004008023010045070008000105006014800900506000307090002600\",\n    \"200000001003060008807031940002506070409800056100000380038670500705090263000004000\",\n    \"004206050070000306000075120002608710890000040047090000000000590056002000009307208\",\n    \"090604025000500904503700100002059001010000000006008437080003600400020000700000058\",\n    \"000750600061980004400000720259006000803000010000820075090208000010060490007340058\",\n    \"600000045200009803089007000001402309790300050000050080076030400520000700004086012\",\n    \"020980040030047601019006080700490000800023907000605000904800006001000300350014020\",\n    \"008060700030870012000205930000700504905004000802903070106000080009120360700000250\",\n    \"600300000502809070013050002700240085004007126009508000305000400170400003008090607\",\n    \"610030004005008703040906020009200400000403680002015070700001500003680200090070031\",\n    \"002080500058370100700006039005902700000000264030410000087201605901040080000090020\",\n    \"006037508700010900130050020002908000050020430600000090200005704003100060498600000\",\n    \"040038500905000000000010460001650043000700901082300050830100074276000090000960002\",\n    \"450000000001600790307200100000850902002169304500000080068094001070508060000010023\",\n  ];\n\n  function chunkArray(myArray, chunk_size) {\n    var index = 0;\n    var arrayLength = myArray.length;\n    var tempArray = [];\n    for (var i = 0; i < myArray.length; i++) myArray[i] = parseInt(myArray[i]);\n    for (index = 0; index < arrayLength; index += chunk_size) {\n      const myChunk = myArray.slice(index, index + chunk_size);\n      tempArray.push(myChunk);\n    }\n\n    return tempArray;\n  }\n\n  const outputArray = chunkArray(puzzles[num].split(\"\"), 9);\n\n  if (num) {\n    return outputArray;\n  } else {\n    return null;\n  }\n}\n","export function solver(board){\n    function possible(board, y, x, n) {\n        for (let i = 0; i < 9; i++) {\n          if (board[y][i] === n || board[i][x] === n) {\n            return false;\n          }\n        }\n    \n        const xSquare = Math.floor(x / 3) * 3;\n        const ySquare = Math.floor(y / 3) * 3;\n    \n        for (let i = 0; i < 3; i++) {\n          for (let j = 0; j < 3; j++) {\n            if (board[ySquare + i][xSquare + j] === n) {\n              return false;\n            }\n          }\n        }\n    \n        return true;\n      }\n    \n      function solve(board) {\n        for (let y = 0; y < 9; y++) {\n          for (let x = 0; x < 9; x++) {\n            if (board[y][x] === 0) {\n              for (let n = 1; n <= 9; n++) {\n                if (possible(board, y, x, n)) {\n                  board[y][x] = n;\n    \n                  if (solve(board)) return board;\n                }\n              }\n    \n              board[y][x] = 0;\n              return false;\n            }\n          }\n        }\n    \n        return board;\n      }\n    return solve(board)\n\n\n}","import { React, useState, useEffect } from \"react\";\nimport { isCompositeComponentWithType } from \"react-dom/test-utils\";\nimport \"./board.css\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button } from \"react-bootstrap\";\nimport { puzzles } from \"./puzzles.js\";\nimport { solver } from \"./solver.js\";\n\nfunction Board() {\n  const randomId = Math.floor(Math.random() * 90);\n  const [puzzleId, setPuzzleId] = useState(randomId);\n  const [originalGame, setOriginalGame] = useState(puzzles(puzzleId));\n  function clone(array) {\n    let clone = array.map(function (arr) {\n      return arr.slice();\n    });\n    return clone;\n  }\n  let [game, setGame] = useState(clone(originalGame));\n  let [solvedBoard, setSolvedBoard] = useState(solver(clone(originalGame)));\n\n  useEffect(() => {\n    setOriginalGame(puzzles(puzzleId));\n    setGame(puzzles(puzzleId));\n    setSolvedBoard(solver(puzzles(puzzleId)))\n  }, [puzzleId]);\n\n  const handleChange = (row, column, event) => {\n    if(event.target.value === \" \"){event.target.value = 0}\n    let copy = [...game];\n    copy[row][column] = parseInt(event.target.value);\n    return copy;\n  };\n\n  function compareBoards(board, solvedBoard) {\n    if (JSON.stringify(board) === JSON.stringify(solvedBoard)) {\n      return true;\n    } else return false;\n  }\n\n  function isCorrectBorder(x,y,col){\n    if (solvedBoard[y][x] === col){\n      return(\"valid-border readWrite\")\n    } else if(solvedBoard[y][x] !== col & col !== \"\"){\n      return(\"invalid-border readWrite\")\n    } else{\n      return(\"readWrite\")\n    }\n  }\n\n  function clearBoard() {\n    setGame(clone(originalGame));\n  }\n  function input(y, x, col) {\n    if(game[y][x]===0){col=\"\"}\n    if (originalGame[y][x] === 0) {\n      {console.log(isCorrectBorder(x,y,col))}\n      return (\n        <input\n          key={uuid()}\n          className={isCorrectBorder(x,y,col)}\n          type=\"text\"\n          maxLength=\"1\"\n          value={col}\n          onClick={(e) => (e.target.value = \"\")}\n          onChange={(e) => setGame(([...game] = handleChange(y, x, e)))}\n        ></input>\n      );\n    } else if (originalGame[y][x] > 0) {\n      return (\n        <input\n          key={uuid()}\n          className=\"readOnly\"\n          readOnly={true}\n          type=\"text\"\n          maxLength=\"1\"\n          value={col}\n        ></input>\n      );\n    }\n  }\n\n  return (\n    <div key={uuid()} className=\"game-container\">\n      <div key={uuid()} className=\"grid-container\">\n        {game.map((row, yindex) => {\n          return (\n            <div key={uuid()} className=\"grid-row\">\n              {row.map((col, xindex) => {\n                return (\n                  <div key={uuid()} className=\"grid-cell\">\n                    {input(yindex, xindex, col)}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n        <div className=\"actionButtons\">\n          \n          <Button onClick={() => setGame(clone(solvedBoard))}>Solution</Button>\n          <Button\n            onClick={() => {\n              setPuzzleId(randomId);\n            }}\n          >\n            New Puzzle\n          </Button>\n          <Button onClick={() => clearBoard()}>Reset</Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n/* <Button onClick={() => console.log(compareBoards(game, solvedBoard))}>\n            Check\n          </Button>*/\nexport default Board;\n","import React from 'react'\n\nfunction footer() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default footer\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Board from './components/Board'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Board></Board>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}